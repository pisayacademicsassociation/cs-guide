import{_ as c,c as r,a as p,b as s,e,f as t,d as a,r as o,o as u}from"./app-h2x3JFrR.js";const d={},g={class:"table-of-contents"},h={class:"hint-container tip"};function k(v,n){const i=o("router-link"),l=o("RouteLink");return u(),r("div",null,[n[32]||(n[32]=p('<h1 id="more-on-strings-and-the-stringbuffer" tabindex="-1"><a class="header-anchor" href="#more-on-strings-and-the-stringbuffer"><span>More on Strings and the StringBuffer</span></a></h1><p>If you haven&#39;t noticed by now, datatypes like <code>int</code>, <code>char</code>, <code>long</code>, <code>etc</code>., have their first letter in lowercase, but the first letter in the word <code>String</code> is capitalized, and is written as <code>String</code> instead of <code>string</code>. Why is there a discrepancy between them? Aren&#39;t they the same datatype type?</p><p>Actually, they aren&#39;t. <code>String</code> is a <strong>reference</strong> data type, while <code>int</code>, <code>char</code>, <code>long</code>, <code>etc</code>. are all <strong>primitive</strong> data types. This is why <code>String</code> is written as <code>String</code> and not <code>string</code>, because it&#39;s actually a class! The only difference it has over the other classes is that you can create a <code>String</code> without using <code>new String()</code>, and use the literal <code>&quot;</code> instead.</p><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents"><span>Table of Contents</span></a></h2>',4)),s("nav",g,[s("ul",null,[s("li",null,[e(i,{to:"#table-of-contents"},{default:t(()=>n[0]||(n[0]=[a("Table of Contents")])),_:1})]),s("li",null,[e(i,{to:"#the-string-constructor"},{default:t(()=>n[1]||(n[1]=[a("The String constructor")])),_:1})]),s("li",null,[e(i,{to:"#string-methods"},{default:t(()=>n[2]||(n[2]=[a("String methods")])),_:1}),s("ul",null,[s("li",null,[e(i,{to:"#string-length"},{default:t(()=>n[3]||(n[3]=[a("String#length()")])),_:1})]),s("li",null,[e(i,{to:"#string-charat"},{default:t(()=>n[4]||(n[4]=[a("String#charAt()")])),_:1})]),s("li",null,[e(i,{to:"#string-getchars"},{default:t(()=>n[5]||(n[5]=[a("String#getChars()")])),_:1})]),s("li",null,[e(i,{to:"#string-trim"},{default:t(()=>n[6]||(n[6]=[a("String#trim()")])),_:1})]),s("li",null,[e(i,{to:"#string-strip"},{default:t(()=>n[7]||(n[7]=[a("String#strip()")])),_:1})]),s("li",null,[e(i,{to:"#string-equals"},{default:t(()=>n[8]||(n[8]=[a("String#equals()")])),_:1})]),s("li",null,[e(i,{to:"#string-equalsignorecase"},{default:t(()=>n[9]||(n[9]=[a("String#equalsIgnoreCase()")])),_:1})]),s("li",null,[e(i,{to:"#string-contentequals"},{default:t(()=>n[10]||(n[10]=[a("String#contentEquals()")])),_:1})]),s("li",null,[e(i,{to:"#string-compareto"},{default:t(()=>n[11]||(n[11]=[a("String#compareTo()")])),_:1})]),s("li",null,[e(i,{to:"#string-replace"},{default:t(()=>n[12]||(n[12]=[a("String#replace()")])),_:1})])])]),s("li",null,[e(i,{to:"#the-stringbuffer-class"},{default:t(()=>n[13]||(n[13]=[a("The StringBuffer class")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-methods"},{default:t(()=>n[14]||(n[14]=[a("StringBuffer methods")])),_:1}),s("ul",null,[s("li",null,[e(i,{to:"#stringbuffer-length"},{default:t(()=>n[15]||(n[15]=[a("StringBuffer#length()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-capacity"},{default:t(()=>n[16]||(n[16]=[a("StringBuffer#capacity()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-indexof"},{default:t(()=>n[17]||(n[17]=[a("StringBuffer#indexOf()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-lastindexof"},{default:t(()=>n[18]||(n[18]=[a("StringBuffer#lastIndexOf()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-substring"},{default:t(()=>n[19]||(n[19]=[a("StringBuffer#substring()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-insert"},{default:t(()=>n[20]||(n[20]=[a("StringBuffer#insert()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-append"},{default:t(()=>n[21]||(n[21]=[a("StringBuffer#append()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-replace"},{default:t(()=>n[22]||(n[22]=[a("StringBuffer#replace()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-reverse"},{default:t(()=>n[23]||(n[23]=[a("StringBuffer#reverse()")])),_:1})]),s("li",null,[e(i,{to:"#stringbuffer-deletecharat"},{default:t(()=>n[24]||(n[24]=[a("StringBuffer#deleteCharAt()")])),_:1})])])])])]),n[33]||(n[33]=p(`<h2 id="the-string-constructor" tabindex="-1"><a class="header-anchor" href="#the-string-constructor"><span>The String constructor</span></a></h2><p>The String class has multiple overloaded constructors, but we are only gonna go over three.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> chars<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This constructor creates a string from <code>chars</code>. All elements inside that array will be joined and turned into a string.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;k&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;y&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> charString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>charString</code> would have the value of <code>&quot;rick astley&quot;</code>.</p><p>What if we only want <code>&quot;rick&quot;</code> or <code>&quot;astley&quot;</code> from the <code>charArray</code>? Well, the second constructor should help with that.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> chars<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This constructor creates a string from <code>chars</code>. However, this constructor also takes an <code>offset</code> and <code>count</code> parameter, so let&#39;s see how those modify the string.</p><ul><li><code>offset</code> determines the starting index in <code>chars</code>.</li><li><code>count</code> determines how many elements to take.</li></ul><p>Take a look at the example below.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;k&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;y&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> charString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>charString</code> would have the value of <code>&quot;rick&quot;</code>, because we started at index <code>0</code> (offset), and took the next <code>4</code> (count) elements inside the <code>charArray</code>.</p><p>What if we want the value <code>&quot;astley&quot;</code> instead?</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;k&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;y&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> charString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our offset would be <code>5</code>, and the count should be <code>6</code>.</p><p>We can also pass in another string to the String constructor.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> myString <span class="token operator">=</span> <span class="token string">&quot;this is a string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> copyString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>myString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, <code>copyString</code> would have the same value as <code>myString</code>, which is <code>&quot;this is a string&quot;</code>.</p><h2 id="string-methods" tabindex="-1"><a class="header-anchor" href="#string-methods"><span>String methods</span></a></h2><p>The <code>String</code> class provides multiple methods that allow you to compare, examine, extract and do more with your string. Here are some useful methods that you may use in the future while programming in Java.</p>`,21)),s("div",h,[n[30]||(n[30]=s("p",{class:"hint-container-title"},"Tips",-1)),s("p",null,[n[26]||(n[26]=a("The headers for this section and ")),n[27]||(n[27]=s("a",{href:"#stringbuffer-methods"},"StringBuffer methods",-1)),n[28]||(n[28]=a(" follow our ")),e(l,{to:"/notation.html"},{default:t(()=>n[25]||(n[25]=[a("guide notation")])),_:1}),n[29]||(n[29]=a("! If you don't wanna read that, then take note of the notation below."))]),n[31]||(n[31]=p("<p><code>Class1#method1()</code> means that the method <code>method1()</code> of the class <code>Class1</code> is an <strong>instance method</strong>. Therefore, you must create a <code>new Class1()</code> or have an instance/object of <code>Class1</code> to be able to use <code>method1()</code> on the created instance/object.</p>",1))]),n[34]||(n[34]=p(`<h3 id="string-length" tabindex="-1"><a class="header-anchor" href="#string-length"><span>String#length()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This returns the length of the string. Basically, it&#39;s how much characters are in the string.</p><ul><li><strong>Returns:</strong><ul><li>the length of the sequence of characters represented by this object.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: 24</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-charat" tabindex="-1"><a class="header-anchor" href="#string-charat"><span>String#charAt()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the <code>char</code> value at the specified index. Basically, it&#39;s the character at that part of the string.</p><ul><li><strong>Parameters:</strong><ul><li><strong>index</strong> The zero-based index in the string you want to get the character (starts at <code>0</code>).</li></ul></li><li><strong>Returns:</strong><ul><li>the <code>char</code> value at the specified index of the string.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &#39;r&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-getchars" tabindex="-1"><a class="header-anchor" href="#string-getchars"><span>String#getChars()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">getChars</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> srcEnd<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst<span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Copies characters from this string and pastes it into the destination character array.</p><p>The first character to be copied is at index <code>srcBegin</code>; the last character to be copied is at index <code>srcEnd - 1</code> (so the total number of characters to be copied is <code>srcEnd - srcBegin</code>). The characters are copied into the array <code>dst</code> starting at index <code>dstBegin</code>.</p><ul><li><strong>Parameters:</strong><ul><li><strong>srcBegin</strong> index of the first character in the string to copy.</li><li><strong>srcEnd</strong> index after the last character in the string to copy.</li><li><strong>dst</strong> the destination array.</li><li><strong>dstBegin</strong> the start offset in the destination array.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// dest now has a value of: { &#39;N&#39;, &#39;e&#39;, &#39;v&#39;, &#39;e&#39;, &#39;r&#39; }</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: Never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-trim" tabindex="-1"><a class="header-anchor" href="#string-trim"><span>String#trim()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns a string whose value is this string, with all leading and trailing space removed. If this <code>String</code> object doesn&#39;t have any leading and trailing space, this <code>String</code> object is returned. If this <code>String</code> object is all whitespaces, a empty <code>String</code> object is returned.</p><p>This method may be used to trim space (as defined above) from the beginning and end of a string.</p><ul><li><strong>Returns:</strong><ul><li>a string whose value is this string, with all leading and trailing space removed, or this string if it has no leading or trailing space.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> strWithSpaces <span class="token operator">=</span> <span class="token string">&quot;   spacey   string    &quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> strJustSpaces <span class="token operator">=</span> <span class="token string">&quot;           &quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> strNoSpaces <span class="token operator">=</span> <span class="token string">&quot;this has no spaces&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strWithSpaces<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;spacey   string&quot;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strJustSpaces<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;&quot;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strNoSpaces<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;this has no spaces&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-strip" tabindex="-1"><a class="header-anchor" href="#string-strip"><span>String#strip()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> <span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Behaves like <code>String#trim()</code>, returning a string whose value is this string, but with all leading and trailing <strong>white space</strong> removed. If this <code>String</code> object doesn&#39;t have any leading and trailing space, this <code>String</code> object is returned. If this <code>String</code> object is all whitespaces, a empty <code>String</code> object is returned.</p><p>This method may be used to trim <strong>white space</strong> from the beginning and end of a string.</p><ul><li><strong>Returns:</strong><ul><li>a string whose value is this string, with all leading and trailing white space removed.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> strWithSpaces <span class="token operator">=</span> <span class="token string">&quot;   spacey   string    &quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> strJustSpaces <span class="token operator">=</span> <span class="token string">&quot;           &quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> strNoSpaces <span class="token operator">=</span> <span class="token string">&quot;this has no spaces&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strWithSpaces<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;spacey   string&quot;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strJustSpaces<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;&quot;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strNoSpaces<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;this has no spaces&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">&quot;White space&quot; and &quot;Space&quot;: What&#39;s the difference?</p><p>Did you know that these two are different things? To the outside eye, it looks like there is no difference between the both. However, internally, there is a huge difference between the both of them.</p><p>However, for simplicity, a &quot;Space&quot; is <code>&#39; &#39;</code>, while &quot;White space&quot; is <code>&#39; &#39;</code>, <code>\\t</code> (tab), <code>\\n</code> (line feed), <code>\\f</code> (form feed), <code>\\r</code> (carriage return)</p><p>This is most likely why using <code>String#strip()</code> is suggested over <code>String#trim()</code>.</p></div><h3 id="string-equals" tabindex="-1"><a class="header-anchor" href="#string-equals"><span>String#equals()</span></a></h3><p><strong>Method</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Compares this string to the specified object. The result is <code>true</code> if and only if the <code>anObject</code> is not <code>null</code> and is a <code>String</code> object that represents the same sequence of characters as this object.</p><ul><li><strong>Parameters:</strong><ul><li><strong>anObject</strong> The object to compare this <code>String</code> against.</li></ul></li><li><strong>Returns:</strong><ul><li><strong>true</strong> if the given object represents a <code>String</code> equivalent to this string, <code>false</code> otherwise.</li></ul></li></ul><h3 id="string-equalsignorecase" tabindex="-1"><a class="header-anchor" href="#string-equalsignorecase"><span>String#equalsIgnoreCase()</span></a></h3><p><strong>Method</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Compares this <code>String</code> to another <code>String</code>, ignoring case. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case.=</p><ul><li><strong>Parameters:</strong><ul><li><strong>anotherString</strong> The <code>String</code> to compare this <code>String</code> against.</li></ul></li><li><strong>Returns:</strong><ul><li><strong>true</strong> if the argument is not <code>null</code> and it represents an equivalent <code>String</code> ignoring case; <code>false</code> otherwise.</li></ul></li></ul><h3 id="string-contentequals" tabindex="-1"><a class="header-anchor" href="#string-contentequals"><span>String#contentEquals()</span></a></h3><p><strong>Method</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> anotherString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>A <code>CharSequence</code> is an interface, which the <code>String</code> and <code>StringBuffer</code> class implement, so you can use them in <code>String#contentEquals()</code>!</p></div><p>Compares this string to the specified <code>CharSequence</code>. The result is true if and only if this <code>String</code> represents the same sequence of char values as the specified sequence.</p><ul><li><strong>Parameters:</strong><ul><li><strong>cs</strong> The sequence to compare this <code>String</code> against</li></ul></li><li><strong>Returns:</strong><ul><li><code>true</code> if this <code>String</code> represents the same sequence of char values as the specified sequence, <code>false</code> otherwise</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">StringBuffer</span> otherStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">contentEquals</span><span class="token punctuation">(</span>otherStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-compareto" tabindex="-1"><a class="header-anchor" href="#string-compareto"><span>String#compareTo()</span></a></h3><p><strong>Method</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Compares two strings lexicographically. If an index in either string has a different character, compares the two characters based on their Unicode value, then returns the value. If two strings have the same characters, but different lengths, the shorter string precedes the longer string. In this case, <code>compareTo()</code> returns the difference of the lengths of this string and the other string.</p><ul><li><strong>Parameters:</strong><ul><li><strong>anotherString</strong> the <code>String</code> to be compared.</li></ul></li><li><strong>Returns:</strong><ul><li>the value <code>0</code> if the argument string is equal to this string; a value less than <code>0</code> if this string is lexicographically less than the string argument; and a value greater than <code>0</code> if this string is lexicographically greater than the string argument.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Never gonna let you down!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Expected output: -5 </span>
<span class="line"> * </span>
<span class="line"> * &quot;Never gonna &quot; are present in both strings, but a difference happens in index 6: &#39;g&#39; and &#39;l&#39;.</span>
<span class="line"> * &#39;g&#39; is the 7th letter of the alphabet, while &#39;l&#39; is the 12th letter of the alphabet</span>
<span class="line"> * Additionally, &#39;g&#39; has a numeric unicode value of 16, while &#39;l&#39; has a unicode value of 21</span>
<span class="line"> * since we are comparing &#39;g&#39; to &#39;l&#39;, it would be 16 - 21 = -5.</span>
<span class="line"> * </span>
<span class="line"> * If you want to get the numeric unicode value of a character, you can use the</span>
<span class="line"> * \`Character.getNumericValue()\` method.</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up! Always!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Expected output: -8</span>
<span class="line"> * </span>
<span class="line"> * &quot;Never gonna give you up!&quot; is present in both strings, then str1 ends. However, str2 still has</span>
<span class="line"> * some characters, so it has a different length. Here, compareTo() returns the difference in</span>
<span class="line"> * lengths, so 24 - 32 = -8</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-replace" tabindex="-1"><a class="header-anchor" href="#string-replace"><span>String#replace()</span></a></h3><p><strong>Method</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns a version of this string with all occurrences of <code>oldChar</code> replaced with <code>newChar</code>. If the character <code>oldChar</code> is not in the given string, returns the original string instead.</p><ul><li><strong>Parameters:</strong><ul><li><strong>oldChar</strong> the old character.</li><li><strong>newChar</strong> the new character.</li></ul></li><li><strong>Returns:</strong><ul><li>a string derived from this string by replacing every occurrence of <code>oldChar</code> with <code>newChar</code>.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;Navar gonna giva you up!&quot; </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>Method</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> target<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> replacement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>A <code>CharSequence</code> is an interface, which the <code>String</code> and <code>StringBuffer</code> class implement, so you can use them in <code>String#replace()</code>!</p></div><p>Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence.</p><ul><li><strong>Parameters:</strong><ul><li><strong>target</strong> The sequence of char values to be replaced</li><li><strong>replacement</strong> The replacement sequence of char values</li></ul></li><li><strong>Returns:</strong><ul><li>The resulting string</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;Never&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Always&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;Always gonna give you up!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="the-stringbuffer-class" tabindex="-1"><a class="header-anchor" href="#the-stringbuffer-class"><span>The StringBuffer class</span></a></h2><p>You probably heard by now that a <code>String</code> is immutable, meaning it&#39;s value cannot be changed. However, there might be some instances where you want to change a <code>String</code>&#39;s data, but how do you do so?</p><p>This is where the <code>StringBuffer</code> class comes in. A <code>StringBuffer</code> allows you to mutate the original string.</p><p>The <code>StringBuffer</code> has multiple overloaded constructors, each with it&#39;s own purpose, but we will only go over three.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This constructor creates a blank <code>StringBuffer</code> with a capacity of <code>16</code>.</p><hr><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This constructor creates a blank <code>StringBuffer</code> with a capacity of <code>capacity</code>.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> myStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This creates a blank <code>StringBuffer</code> with a capacity of <code>42</code>.</p><hr><p>We can also add a <code>String</code> directly to the <code>StringBuffer</code>!</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This constructor creates a <code>StringBuffer</code> with the value <code>str</code> and a capacity of <code>str.length() + 16</code>.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> lyrics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This creates a <code>StringBuffer</code> with the value of <code>&quot;Never gonna give you up!&quot;</code> and a capacity of <code>40 (24 + 16)</code>.</p><h2 id="stringbuffer-methods" tabindex="-1"><a class="header-anchor" href="#stringbuffer-methods"><span>StringBuffer methods</span></a></h2><p>Like the <code>String</code> class, the <code>StringBuffer</code> class provides multiple methods that allow you to modify, compare, examine, extract and do more with your string. Here are some useful methods that you may use in the future while programming in Java.</p><h3 id="stringbuffer-length" tabindex="-1"><a class="header-anchor" href="#stringbuffer-length"><span>StringBuffer#length()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the length of this character sequence. Basically, it&#39;s how much characters are in the <code>StringBuffer</code>.</p><ul><li><strong>Returns:</strong><ul><li>the number of <code>char</code>s in this sequence</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: 24</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer-capacity" tabindex="-1"><a class="header-anchor" href="#stringbuffer-capacity"><span>StringBuffer#capacity()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the current capacity. The capacity is the number of characters that can be stored (including already written characters), beyond which an allocation will occur.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Technically, a <code>StringBuffer</code> doesn&#39;t have a fixed capacity! When your <code>StringBuffer</code> reaches maximum capacity, Java will automatically allocate more memory to your <code>StringBuffer</code> to support the appended items!</p></div><ul><li><strong>Returns:</strong><ul><li>the current capacity.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: 40</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">How is the capacity 40?</p><p>Recall that a <code>StringBuffer</code>&#39;s capacity is specified from the constructor. Here, we have used the <code>new StringBuffer(String str)</code> constructor. This set&#39;s the capacity of the <code>StringBuffer</code> to <code>str.length() + 16</code>. Since the length of <code>&quot;Never gonna give you up&quot;</code> is 24, the capacity is <code>24 + 16</code>, which is equal to <code>40</code>.</p></div><h3 id="stringbuffer-indexof" tabindex="-1"><a class="header-anchor" href="#stringbuffer-indexof"><span>StringBuffer#indexOf()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the index within this string of the first occurrence of the specified substring. Basically, returns the zero-based index where it first sees <code>str</code> in this string. If an empty string <code>&quot;&quot;</code> is provided, <code>0</code> is returned.</p><ul><li><strong>Parameters:</strong><ul><li><strong>str</strong> the substring to search for.</li></ul></li><li><strong>Returns:</strong><ul><li>the index of the first occurrence of the specified substring, or <code>-1</code> if there is no such occurrence.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the zero-based index within this string of the first occurrence of the specified substring, starting at the specified index. Basically, returns the zero-based index where it first sees <code>str</code> in this string, starting at <code>fromIndex</code>. If an empty string <code>&quot;&quot;</code> is provided, <code>fromIndex</code> is returned.</p><ul><li><strong>Parameters:</strong><ul><li><strong>str</strong> the substring to search for.</li><li><strong>fromIndex</strong> the index from which to start the search.</li></ul></li><li><strong>Returns:</strong><ul><li>the index of the first occurrence of the specified substring, or <code>-1</code> if there is no such occurrence.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: 15</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer-lastindexof" tabindex="-1"><a class="header-anchor" href="#stringbuffer-lastindexof"><span>StringBuffer#lastIndexOf()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the index within this string of the last occurrence of the specified substring. Basically, returns the zero-based index where it last sees <code>str</code> in this string. If an empty string <code>&quot;&quot;</code> is provided, the string&#39;s length is returned.</p><p>Returns the index within this string of the first occurrence of the specified substring.</p><ul><li><strong>Parameters:</strong><ul><li><strong>str</strong> the substring to search for.</li></ul></li><li><strong>Returns:</strong><ul><li>the index of the first occurrence of the specified substring, or <code>-1</code> if there is no such occurrence.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: 15</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the zero-based index within this string of the first occurrence of the specified substring, searching backward starting at the specified index. If an empty string <code>&quot;&quot;</code> is provided, <code>fromIndex</code> is returned.</p><ul><li><strong>Parameters:</strong><ul><li><strong>str</strong> the substring to search for.</li><li><strong>fromIndex</strong> the index from which to start the search.</li></ul></li><li><strong>Returns:</strong><ul><li>the index of the first occurrence of the specified substring, or <code>-1</code> if there is no such occurrence.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: 15</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * We start at index 20, so our string would be &quot;Never gonna give you &quot;. As you can see, the letter &quot;e&quot; only appears in the</span>
<span class="line"> * 1st, 3rd and 15th index. Since 15 is the last index, it outputs 15. </span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: 3</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * We start at index 14, so our string would be &quot;Never gonna giv&quot;. As you can see, the letter &quot;e&quot; only appears in the</span>
<span class="line"> * 1st and 3rd. Since 3 is the last index, it outputs 3. </span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer-substring" tabindex="-1"><a class="header-anchor" href="#stringbuffer-substring"><span>StringBuffer#substring()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns a new String that contains a subsequence of characters currently contained in this character sequence. The substring begins at the specified index and extends to the end of this sequence.</p><ul><li><strong>Parameters:</strong><ul><li><strong>start</strong> The beginning index, inclusive.</li></ul></li><li><strong>Returns:</strong><ul><li>The new string.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot; gonna give you up!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns a new <code>String</code> that contains a subsequence of characters currently contained in this sequence. The substring begins at the specified <code>start</code> and extends to the character at index <code>end - 1</code>.</p><ul><li>Parameters: <ul><li><strong>start</strong> The beginning index, inclusive.</li><li><strong>end</strong> The ending index, exclusive.</li></ul></li><li>Returns: <ul><li>The new string.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;Never&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer-insert" tabindex="-1"><a class="header-anchor" href="#stringbuffer-insert"><span>StringBuffer#insert()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Inserts the string representation of the <code>Object</code> argument into this character sequence at the indicated offset.</p><p>The <code>offset</code> argument must be greater than or equal to <code>0</code>, and less than or equal to the length of this sequence.</p><ul><li><strong>Parameters:</strong><ul><li><strong>offset</strong> the offset.</li><li><strong>obj</strong> an <code>Object</code>.</li></ul></li><li><strong>Returns:</strong><ul><li>This object.</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>StringBuffer#insert()</code> also provides overloads for every single primitive data type, so you can chuck in your <code>int</code>, <code>double</code>, <code>float</code>, into this string with ease!</p></div><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Gonna make you understand! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;Gonna make you understand! Never gonna give you up!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&quot; or down&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;Never gonna give you up or down!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer-append" tabindex="-1"><a class="header-anchor" href="#stringbuffer-append"><span>StringBuffer#append()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Appends the string representation of the <code>Object</code> argument.</p><p>The overall effect is exactly as if the argument were converted to a string by the method <code>String.valueOf(Object)</code>, and the characters of that string were then appended to this character sequence.</p><ul><li><strong>Parameters:</strong><ul><li><strong>obj</strong> an <code>Object</code>.</li></ul></li><li><strong>Returns:</strong><ul><li>This object.</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>StringBuffer#append()</code> also provides overloads for every single primitive data type, so you can chuck in your <code>int</code>, <code>double</code>, <code>float</code>, into this string with ease!</p></div><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; Never gonna let you down!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;Never gonna give you up! Never gonna let you down!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer-replace" tabindex="-1"><a class="header-anchor" href="#stringbuffer-replace"><span>StringBuffer#replace()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Replaces the characters in a substring of this sequence with characters in the specified String. The substring begins at the specified <code>start</code> and extends to the character at index <code>end - 1</code> or to the end of the sequence if no such character exists. First the characters in the substring are removed and then the specified <code>String</code> is inserted at <code>start</code>. (This sequence will be lengthened to accommodate the specified String if necessary.)</p><ul><li><strong>Parameters:</strong><ul><li><strong>start</strong> The beginning index, inclusive.</li><li><strong>end</strong> The ending index, exclusive.</li><li><strong>str</strong> <code>String</code> that will replace previous contents.</li></ul></li><li><strong>Returns:</strong><ul><li>This object.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;Always&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;Always gonna give you up!&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * The characters from index 0 to 5 are: &quot;Never &quot;, but since 5 is exclusive, the result would be &quot;Never&quot;.</span>
<span class="line"> * Now, we replace &quot;Never&quot;, with &quot;Always&quot;, and since the string can be lengthened to accomodate the specified</span>
<span class="line"> * String, it would be &quot;Always gonna give you up!&quot;</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer-reverse" tabindex="-1"><a class="header-anchor" href="#stringbuffer-reverse"><span>StringBuffer#reverse()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Reverses the current character sequence. This mutates the current <code>StringBuilder</code> instead of returning a new <code>StringBuilder</code> with the reversed characters.</p><ul><li><strong>Returns:</strong><ul><li>This object.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;!pu uoy evig annog reveN&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;!pu uoy evig annog reveN&quot; (the original string is reversed.)</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * The characters from index 0 to 5 are: &quot;Never &quot;, but since 5 is exclusive, the result would be &quot;Never&quot;.</span>
<span class="line"> * Now, we replace &quot;Never&quot;, with &quot;Always&quot;, and since the string can be lengthened to accomodate the specified</span>
<span class="line"> * String, it would be &quot;Always gonna give you up!&quot;</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuffer-deletecharat" tabindex="-1"><a class="header-anchor" href="#stringbuffer-deletecharat"><span>StringBuffer#deleteCharAt()</span></a></h3><p><strong>Method:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> <span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Removes the <code>char</code> at the specified position in this sequence and returns this <code>StringBuffer</code>. This sequence is shortened by one <code>char</code>.</p><ul><li><strong>Parameters:</strong><ul><li><strong>index</strong> Index of char to remove</li></ul></li><li><strong>Returns:</strong><ul><li>This object.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;Never gonna give you up!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Expected output: &quot;Never onna give you up!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,199))])}const f=c(d,[["render",k],["__file","string-and-string-buffer.html.vue"]]),b=JSON.parse('{"path":"/cs4/3/string-and-string-buffer.html","title":"More on Strings and the StringBuffer","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Table of Contents","slug":"table-of-contents","link":"#table-of-contents","children":[]},{"level":2,"title":"The String constructor","slug":"the-string-constructor","link":"#the-string-constructor","children":[]},{"level":2,"title":"String methods","slug":"string-methods","link":"#string-methods","children":[{"level":3,"title":"String#length()","slug":"string-length","link":"#string-length","children":[]},{"level":3,"title":"String#charAt()","slug":"string-charat","link":"#string-charat","children":[]},{"level":3,"title":"String#getChars()","slug":"string-getchars","link":"#string-getchars","children":[]},{"level":3,"title":"String#trim()","slug":"string-trim","link":"#string-trim","children":[]},{"level":3,"title":"String#strip()","slug":"string-strip","link":"#string-strip","children":[]},{"level":3,"title":"String#equals()","slug":"string-equals","link":"#string-equals","children":[]},{"level":3,"title":"String#equalsIgnoreCase()","slug":"string-equalsignorecase","link":"#string-equalsignorecase","children":[]},{"level":3,"title":"String#contentEquals()","slug":"string-contentequals","link":"#string-contentequals","children":[]},{"level":3,"title":"String#compareTo()","slug":"string-compareto","link":"#string-compareto","children":[]},{"level":3,"title":"String#replace()","slug":"string-replace","link":"#string-replace","children":[]}]},{"level":2,"title":"The StringBuffer class","slug":"the-stringbuffer-class","link":"#the-stringbuffer-class","children":[]},{"level":2,"title":"StringBuffer methods","slug":"stringbuffer-methods","link":"#stringbuffer-methods","children":[{"level":3,"title":"StringBuffer#length()","slug":"stringbuffer-length","link":"#stringbuffer-length","children":[]},{"level":3,"title":"StringBuffer#capacity()","slug":"stringbuffer-capacity","link":"#stringbuffer-capacity","children":[]},{"level":3,"title":"StringBuffer#indexOf()","slug":"stringbuffer-indexof","link":"#stringbuffer-indexof","children":[]},{"level":3,"title":"StringBuffer#lastIndexOf()","slug":"stringbuffer-lastindexof","link":"#stringbuffer-lastindexof","children":[]},{"level":3,"title":"StringBuffer#substring()","slug":"stringbuffer-substring","link":"#stringbuffer-substring","children":[]},{"level":3,"title":"StringBuffer#insert()","slug":"stringbuffer-insert","link":"#stringbuffer-insert","children":[]},{"level":3,"title":"StringBuffer#append()","slug":"stringbuffer-append","link":"#stringbuffer-append","children":[]},{"level":3,"title":"StringBuffer#replace()","slug":"stringbuffer-replace","link":"#stringbuffer-replace","children":[]},{"level":3,"title":"StringBuffer#reverse()","slug":"stringbuffer-reverse","link":"#stringbuffer-reverse","children":[]},{"level":3,"title":"StringBuffer#deleteCharAt()","slug":"stringbuffer-deletecharat","link":"#stringbuffer-deletecharat","children":[]}]}],"git":{"updatedTime":1740064904000},"filePathRelative":"cs4/3/string-and-string-buffer.md"}');export{f as comp,b as data};
