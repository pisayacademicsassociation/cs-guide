import{e}from"./app.1020f729.js";import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";const s={};function t(o,n){return n[0]||(n[0]=e(`<p>Error</p><ul><li>A serious problem that a reasonable application should not try to catch</li></ul><p>Exception</p><ul><li>A condition that a reasonable application might want to catch</li></ul><p>Throwable</p><ul><li>Main interface of items that can be thrown</li></ul><p>Two kinds of exceptions</p><ul><li>Checked exceptions <ul><li>Exceptions that can be found during compile time</li></ul></li><li>Unchecked exceptions <ul><li>Exceptions that are found during run time (NullPointerException)</li></ul></li></ul><p>Throwing an exception</p><ul><li>Process of creating/generating an exception</li></ul><p>Handling an exception</p><ul><li>Coding process which detects and deals with exceptions</li></ul><p>Custom exception</p><ul><li>Exceptions created by the programmer to meet their specific requirements.</li><li>Created by extending the <code>Exception</code> class.</li><li>If you don&#39;t want to store exception details, use the default constructor. Otherwise, use a parameterized one.N</li></ul><h1 id="errors-and-exceptions" tabindex="-1"><a class="header-anchor" href="#errors-and-exceptions" aria-hidden="true">#</a> Errors and Exceptions</h1><p>In previous CS projects, you&#39;ve learned that a program can produce an Error when something unexpected happens. In Java, this is extended further with <code>Exception</code>s. Here, there is a clear difference between an <code>Error</code> and an <code>Exception</code>.</p><h2 id="errors-and-exceptions-the-difference" tabindex="-1"><a class="header-anchor" href="#errors-and-exceptions-the-difference" aria-hidden="true">#</a> Errors and Exceptions: The Difference</h2><p>Now, what is the difference between an <code>Error</code> and an <code>Exception</code> in Java?</p><p>An <code>Error</code> is a serious problem that a reasonable application <strong>shouldn&#39;t</strong> catch. An example of this is the <code>VirtualMachineError</code>, which is thrown when the Java Virtual Machine (JVM) broke or has run out of resources for it to continue operating. A reasonable program shouldn&#39;t try to catch this <code>Error</code>, since it can&#39;t really do anything about it.</p><p>Exceptions on the other hand, indicate problems that a program might wanna catch. An example of this is the <code>ArithmeticException</code>, which is thrown when an exceptional arithmetic condition has occurred. For example: dividing by zero. Dividing by 0 in Math gives a result of undefined, but Java doesn&#39;t do that. Instead, it throws an <code>ArithmeticException</code> to indicate that the program tried to divide by zero. You can catch this <code>Exception</code> and do actions accordingly.</p><h2 id="exception-types" tabindex="-1"><a class="header-anchor" href="#exception-types" aria-hidden="true">#</a> Exception types</h2><p>In Java, there are 2 exceptions:</p><ul><li>Checked exceptions, which are exceptional conditions that a program should anticipate and recover from, such as <code>ArithmeticException</code>, <code>FileNotFoundException</code>, etc., and</li><li>Unchecked exceptions, which are exceptional conditions that are internal to the application that could not be anticipated or recovered from, such as a <code>NullPointerException</code>.</li></ul><h2 id="creating-custom-exceptions" tabindex="-1"><a class="header-anchor" href="#creating-custom-exceptions" aria-hidden="true">#</a> Creating custom exceptions</h2><p>Sometimes, you would think of creating a custom exception for a possible exceptional condition in your program. You can do this by extending the <code>Exception</code> class.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This allows you to create custom exceptions that you can use in your code.</p><p>You can also create a default constructor if you don&#39;t wanna store Exception details, like so.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="throwing-and-catching-exceptions" tabindex="-1"><a class="header-anchor" href="#throwing-and-catching-exceptions" aria-hidden="true">#</a> Throwing and Catching Exceptions</h2><p>Sometimes, you want to create exceptions for exceptional conditions in your code. You can do so by using the <code>throw</code> statement with your preferred exception.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InputMismatchException</span><span class="token punctuation">(</span><span class="token string">&quot;Expected number input!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You should be throwing <strong>instances</strong> of <code>Exception</code>, not the Exception class itself.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// This is wrong.</span>
<span class="token keyword">throw</span> <span class="token class-name">InputMismatchException</span><span class="token punctuation">;</span>

<span class="token comment">// This is also wrong.</span>
<span class="token keyword">throw</span> <span class="token class-name">InputMismatchException</span><span class="token punctuation">(</span><span class="token string">&quot;Expected number input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><p>Now, how do we handle exceptions? You can handle code that could possibly throw an exception inside a <code>try-catch</code> or <code>try-catch-finally</code> block.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token comment">// code that could produce exceptions</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// code to handle the produced exception.</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token comment">// code that could produce exceptions</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// code to handle the produced exception.</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
	<span class="token comment">// code to execute after the try or catch block.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Code that could produce an <code>Exception</code> is added inside the <code>try</code> block. When an Exception occurs, the corresponding <code>catch</code> block will handle the thrown exception, then code inside the <code>finally</code> block is executed, if it&#39;s provided.</p><p>Do note that a <code>try</code> block must be preceeded by either a <code>catch</code> or a <code>finally</code> block.</p>`,37))}var i=a(s,[["render",t]]);export{i as default};
