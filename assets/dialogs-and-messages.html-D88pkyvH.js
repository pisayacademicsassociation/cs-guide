import{_ as s,c as e,a,o as n}from"./app-CRt94Bf-.js";const t="/cs-guide/assets/input_1-rnvWoFi6.png",l="/cs-guide/assets/message_dialogs-BTBtYGGn.png",h={};function d(p,i){return n(),e("div",null,i[0]||(i[0]=[a('<h1 id="dialogs-and-messages" tabindex="-1"><a class="header-anchor" href="#dialogs-and-messages"><span>Dialogs and Messages</span></a></h1><p>There may be some instances where you wanted to show a quick message to the user, but it&#39;s too hard to be implemented into the GUI directly, or to be created in an entirely new JFrame. Luckily, there is a solution: the Dialog Box.</p><p>A dialog box can be used to easily display messages, output, or even take input! To use dialog boxes, you need the <code>JOptionPane</code> class from the <code>javax.swing</code> package.</p><h2 id="taking-input-using-a-dialog-box" tabindex="-1"><a class="header-anchor" href="#taking-input-using-a-dialog-box"><span>Taking input using a dialog box</span></a></h2><p>To take user input using a dialog box, you can use the <code>JOptionPane.showInputDialog()</code> method.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> static</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> String</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">showInputDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Object</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> message);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Using this method shows an input dialog with <code>message</code> as the message.</p><img src="'+t+`"><p>Additionally, you can center the input dialog relative to a component by providing a <code>parentComponent</code>.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> static</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> String</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">showInputDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Component</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> parentComponent, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Object</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> message);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Using this method would center the created input dialog on the <code>parentComponent</code>.</p><p>Do you wanna add a title? Well, you can!</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> static</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> String</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> showInputDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Component</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> parentComponent, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Object</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> message, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> title, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> messageType);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This overloaded method shows a input dialog box from the user parented to <code>parentComponent</code> with the dialog having the title <code>title</code> and message type <code>messageType</code>.</p><ul><li><strong>Parameters:</strong><ul><li><strong>parentComponent</strong> the parent <code>Component</code> for the dialog</li><li><strong>message</strong> the <code>Object</code> to display</li><li><strong>title</strong> the <code>String</code> to display in the dialog title bar</li><li><strong>messageType</strong> the type of message that is to be displayed: <code>JOptionPane.ERROR_MESSAGE</code>, <code>JOptionPane.INFORMATION_MESSAGE</code>, <code>JOptionPane.WARNING_MESSAGE</code>, <code>JOptionPane.QUESTION_MESSAGE</code>, or <code>JOptionPane.PLAIN_MESSAGE</code>.</li></ul></li></ul><p>While this dialog box is still on the screen, the user cannot interact with the application.</p><p><strong>Example:</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> input</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">showInputDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(myJButton, </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;Please input a number.&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;Number input&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">QUESTION_MESSAGE</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="displaying-messages-using-a-dialog-box" tabindex="-1"><a class="header-anchor" href="#displaying-messages-using-a-dialog-box"><span>Displaying messages using a dialog box</span></a></h2><p>To take user input using a dialog box, you can use the <code>JOptionPane.showMessageDialog()</code> method.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> static</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> void</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> showMessageDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Component</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> parentComponent, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Object</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> message);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Just like <code>showInputDialog()</code>, you can center the message dialog relative to a component by providing a <code>parentComponent</code>.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> static</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> void</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> showMessageDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Component</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> parentComponent, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Object</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> message, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> title, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> messageType);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This overloaded method brings up a dialog that displays a message using a default icon determined by the <code>messageType</code> parameter.</p><ul><li>Parameters: <ul><li><strong>parentComponent</strong> determines the <code>Frame</code> in which the dialog is displayed; if <code>null</code>, or if the <code>parentComponent</code> has no <code>Frame</code>, a default <code>Frame</code> is used.</li><li><strong>message</strong> the <code>Object</code> to display.</li><li><strong>title</strong> the title string for the dialog.</li><li><strong>messageType</strong> the type of message that is to be displayed: <code>JOptionPane.ERROR_MESSAGE</code>, <code>JOptionPane.INFORMATION_MESSAGE</code>, <code>JOptionPane.WARNING_MESSAGE</code>, <code>JOptionPane.QUESTION_MESSAGE</code>, or <code>JOptionPane.PLAIN_MESSAGE</code>.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> input</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">showMessageDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(myJButton, </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;Please input a proper number!&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;Wrong input!&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">ERROR_MESSAGE</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="confirmations-using-a-dialog-box" tabindex="-1"><a class="header-anchor" href="#confirmations-using-a-dialog-box"><span>Confirmations using a dialog box</span></a></h2><p>To ask a user for confirmation using a dialog box, you can use the <code>JOptionPane.showConfirmDialog()</code> method.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> static</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> void</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> showConfirmDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Component</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> parentComponent, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Object</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> message);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Just like <code>showInputDialog()</code>, you can center the confirm dialog relative to a component by providing a <code>parentComponent</code>.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> static</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> void</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> showConfirmDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Component</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> parentComponent, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Object</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> message, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> title, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> optionType);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This overloaded method brings up a dialog where the number of choices is determined by the <code>optionType</code> parameter.</p><ul><li>Parameters: <ul><li><strong>parentComponent</strong> determines the <code>Frame</code> in which the dialog is displayed; if <code>null</code>, or if the <code>parentComponent</code> has no <code>Frame</code>, a default <code>Frame</code> is used.</li><li><strong>message</strong> the <code>Object</code> to display.</li><li><strong>title</strong> the title string for the dialog.</li><li><strong>optionType</strong> the type of options available on the dialog: <code>JOptionPane.YES_NO_OPTION</code>, <code>JOptionPane.YES_NO_CANCEL_OPTION</code>, or <code>JOptionPane.OK_CANCEL_OPTION</code>.</li></ul></li></ul><p>If you want to add the <code>messageType</code> parameter as well, you can do so using the overloaded method below:</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> static</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> void</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> showMessageDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Component</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> parentComponent, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Object</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> message, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> title, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> optionType, </span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> messageType);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This overloaded method brings up a dialog where the number of choices is determined by the <code>optionType</code> parameter, where the <code>messageType</code> parameter determines the icon to display.</p><ul><li>Parameters: <ul><li><strong>parentComponent</strong> determines the <code>Frame</code> in which the dialog is displayed; if <code>null</code>, or if the <code>parentComponent</code> has no <code>Frame</code>, a default <code>Frame</code> is used.</li><li><strong>message</strong> the <code>Object</code> to display.</li><li><strong>title</strong> the title string for the dialog.</li><li><strong>optionType</strong> the type of options available on the dialog: <code>JOptionPane.YES_NO_OPTION</code>, <code>JOptionPane.YES_NO_CANCEL_OPTION</code>, or <code>JOptionPane.OK_CANCEL_OPTION</code>.</li><li><strong>messageType</strong> the type of message that is to be displayed: <code>JOptionPane.ERROR_MESSAGE</code>, <code>JOptionPane.INFORMATION_MESSAGE</code>, <code>JOptionPane.WARNING_MESSAGE</code>, <code>JOptionPane.QUESTION_MESSAGE</code>, or <code>JOptionPane.PLAIN_MESSAGE</code>.</li></ul></li></ul><p><code>showMessageDialog()</code> outputs an integer that corresponds to the user&#39;s choice. You can compare the returned integer to the constants from the <code>JOptionPane</code>: <code>JOptionPane.OK_OPTION</code>, <code>JOptionPane.YES_OPTION</code>, <code>JOptionPane.NO_OPTION</code>, and <code>JOptionPane.CANCEL_OPTION</code>.</p><p><strong>Example:</strong></p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> choice</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">showConfirmDialog</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(myJButton, </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;Are you sure you want to confirm?&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;Confirmation&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">YES_NO_CANCEL_OPTION</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">if</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (choice === </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">JOptionPane</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">YES_OPTION</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">	// do something when the user clicks yes.</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">// ...</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="message-types" tabindex="-1"><a class="header-anchor" href="#message-types"><span>Message types</span></a></h2><p>For easy reference, refer to the image below for the types of <code>messageType</code> that you can use <em>taken from the presentation</em>.</p><img src="`+l+'"><p>Retrieved from <em>JOptionPane Message Dialog Constants.</em> (2019). In K. Sierra &amp; B. Bates (Eds.), Java™ <em>How To Program (Early Objects)</em> (10th ed., p. 552). O&#39;Reilly Media, Inc.: <a href="https://www.oreilly.com/" target="_blank" rel="noopener noreferrer">https://www.oreilly.com/</a></p>',45)]))}const r=s(h,[["render",d],["__file","dialogs-and-messages.html.vue"]]),k=JSON.parse('{"path":"/cs4/3/dialogs-and-messages.html","title":"Dialogs and Messages","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Taking input using a dialog box","slug":"taking-input-using-a-dialog-box","link":"#taking-input-using-a-dialog-box","children":[]},{"level":2,"title":"Displaying messages using a dialog box","slug":"displaying-messages-using-a-dialog-box","link":"#displaying-messages-using-a-dialog-box","children":[]},{"level":2,"title":"Confirmations using a dialog box","slug":"confirmations-using-a-dialog-box","link":"#confirmations-using-a-dialog-box","children":[]},{"level":2,"title":"Message types","slug":"message-types","link":"#message-types","children":[]}],"git":{"updatedTime":1737561594000},"filePathRelative":"cs4/3/dialogs-and-messages.md"}');export{r as comp,k as data};
