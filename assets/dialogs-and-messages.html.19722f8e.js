import{r as o,o as t,c as p,e as c,a,b as s,d as i,F as l}from"./app.1020f729.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";var r="/cs-guide/assets/input_1.d35f5f88.png",u="/cs-guide/assets/message_dialogs.22a51ef5.png";const g={},m={href:"https://www.oreilly.com/",target:"_blank",rel:"noopener noreferrer"};function k(h,n){const e=o("OutboundLink");return t(),p(l,null,[n[6]||(n[6]=c(`<h1 id="dialogs-and-messages" tabindex="-1"><a class="header-anchor" href="#dialogs-and-messages" aria-hidden="true">#</a> Dialogs and Messages</h1><p>There may be some instances where you wanted to show a quick message to the user, but it&#39;s too hard to be implemented into the GUI directly, or to be created in an entirely new JFrame. Luckily, there is a solution: the Dialog Box.</p><p>A dialog box can be used to easily display messages, output, or even take input! To use dialog boxes, you need the <code>JOptionPane</code> class from the <code>javax.swing</code> package.</p><h2 id="taking-input-using-a-dialog-box" tabindex="-1"><a class="header-anchor" href="#taking-input-using-a-dialog-box" aria-hidden="true">#</a> Taking input using a dialog box</h2><p>To take user input using a dialog box, you can use the <code>JOptionPane.showInputDialog()</code> method.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Using this method shows an input dialog with <code>message</code> as the message.</p><img src="`+r+`"><p>Additionally, you can center the input dialog relative to a component by providing a <code>parentComponent</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span> <span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Using this method would center the created input dialog on the <code>parentComponent</code>.</p><p>Do you wanna add a title? Well, you can!</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span> <span class="token class-name">Object</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token keyword">int</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This overloaded method shows a input dialog box from the user parented to <code>parentComponent</code> with the dialog having the title <code>title</code> and message type <code>messageType</code>.</p><ul><li><strong>Parameters:</strong><ul><li><strong>parentComponent</strong> the parent <code>Component</code> for the dialog</li><li><strong>message</strong> the <code>Object</code> to display</li><li><strong>title</strong> the <code>String</code> to display in the dialog title bar</li><li><strong>messageType</strong> the type of message that is to be displayed: <code>JOptionPane.ERROR_MESSAGE</code>, <code>JOptionPane.INFORMATION_MESSAGE</code>, <code>JOptionPane.WARNING_MESSAGE</code>, <code>JOptionPane.QUESTION_MESSAGE</code>, or <code>JOptionPane.PLAIN_MESSAGE</code>.</li></ul></li></ul><p>While this dialog box is still on the screen, the user cannot interact with the application.</p><p><strong>Example:</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span>myJButton<span class="token punctuation">,</span> <span class="token string">&quot;Please input a number.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Number input&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">QUESTION_MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="displaying-messages-using-a-dialog-box" tabindex="-1"><a class="header-anchor" href="#displaying-messages-using-a-dialog-box" aria-hidden="true">#</a> Displaying messages using a dialog box</h2><p>To take user input using a dialog box, you can use the <code>JOptionPane.showMessageDialog()</code> method.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span> <span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Just like <code>showInputDialog()</code>, you can center the message dialog relative to a component by providing a <code>parentComponent</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span> <span class="token class-name">Object</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token keyword">int</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This overloaded method brings up a dialog that displays a message using a default icon determined by the <code>messageType</code> parameter.</p><ul><li>Parameters: <ul><li><strong>parentComponent</strong> determines the <code>Frame</code> in which the dialog is displayed; if <code>null</code>, or if the <code>parentComponent</code> has no <code>Frame</code>, a default <code>Frame</code> is used.</li><li><strong>message</strong> the <code>Object</code> to display.</li><li><strong>title</strong> the title string for the dialog.</li><li><strong>messageType</strong> the type of message that is to be displayed: <code>JOptionPane.ERROR_MESSAGE</code>, <code>JOptionPane.INFORMATION_MESSAGE</code>, <code>JOptionPane.WARNING_MESSAGE</code>, <code>JOptionPane.QUESTION_MESSAGE</code>, or <code>JOptionPane.PLAIN_MESSAGE</code>.</li></ul></li></ul><p><strong>Example:</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>myJButton<span class="token punctuation">,</span> <span class="token string">&quot;Please input a proper number!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong input!&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">ERROR_MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="confirmations-using-a-dialog-box" tabindex="-1"><a class="header-anchor" href="#confirmations-using-a-dialog-box" aria-hidden="true">#</a> Confirmations using a dialog box</h2><p>To ask a user for confirmation using a dialog box, you can use the <code>JOptionPane.showConfirmDialog()</code> method.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showConfirmDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span> <span class="token class-name">Object</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Just like <code>showInputDialog()</code>, you can center the confirm dialog relative to a component by providing a <code>parentComponent</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showConfirmDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span> <span class="token class-name">Object</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token keyword">int</span> optionType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This overloaded method brings up a dialog where the number of choices is determined by the <code>optionType</code> parameter.</p><ul><li>Parameters: <ul><li><strong>parentComponent</strong> determines the <code>Frame</code> in which the dialog is displayed; if <code>null</code>, or if the <code>parentComponent</code> has no <code>Frame</code>, a default <code>Frame</code> is used.</li><li><strong>message</strong> the <code>Object</code> to display.</li><li><strong>title</strong> the title string for the dialog.</li><li><strong>optionType</strong> the type of options available on the dialog: <code>JOptionPane.YES_NO_OPTION</code>, <code>JOptionPane.YES_NO_CANCEL_OPTION</code>, or <code>JOptionPane.OK_CANCEL_OPTION</code>.</li></ul></li></ul><p>If you want to add the <code>messageType</code> parameter as well, you can do so using the overloaded method below:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token class-name">Component</span> parentComponent<span class="token punctuation">,</span> <span class="token class-name">Object</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token keyword">int</span> optionType<span class="token punctuation">,</span> <span class="token keyword">int</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This overloaded method brings up a dialog where the number of choices is determined by the <code>optionType</code> parameter, where the <code>messageType</code> parameter determines the icon to display.</p><ul><li>Parameters: <ul><li><strong>parentComponent</strong> determines the <code>Frame</code> in which the dialog is displayed; if <code>null</code>, or if the <code>parentComponent</code> has no <code>Frame</code>, a default <code>Frame</code> is used.</li><li><strong>message</strong> the <code>Object</code> to display.</li><li><strong>title</strong> the title string for the dialog.</li><li><strong>optionType</strong> the type of options available on the dialog: <code>JOptionPane.YES_NO_OPTION</code>, <code>JOptionPane.YES_NO_CANCEL_OPTION</code>, or <code>JOptionPane.OK_CANCEL_OPTION</code>.</li><li><strong>messageType</strong> the type of message that is to be displayed: <code>JOptionPane.ERROR_MESSAGE</code>, <code>JOptionPane.INFORMATION_MESSAGE</code>, <code>JOptionPane.WARNING_MESSAGE</code>, <code>JOptionPane.QUESTION_MESSAGE</code>, or <code>JOptionPane.PLAIN_MESSAGE</code>.</li></ul></li></ul><p><code>showMessageDialog()</code> outputs an integer that corresponds to the user&#39;s choice. You can compare the returned integer to the constants from the <code>JOptionPane</code>: <code>JOptionPane.OK_OPTION</code>, <code>JOptionPane.YES_OPTION</code>, <code>JOptionPane.NO_OPTION</code>, and <code>JOptionPane.CANCEL_OPTION</code>.</p><p><strong>Example:</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> choice <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showConfirmDialog</span><span class="token punctuation">(</span>myJButton<span class="token punctuation">,</span> <span class="token string">&quot;Are you sure you want to confirm?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Confirmation&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">YES_NO_CANCEL_OPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span><span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">YES_OPTION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// do something when the user clicks yes.</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="message-types" tabindex="-1"><a class="header-anchor" href="#message-types" aria-hidden="true">#</a> Message types</h2><p>For easy reference, refer to the image below for the types of <code>messageType</code> that you can use <em>taken from the presentation</em>.</p><img src="`+u+'">',44)),a("p",null,[n[1]||(n[1]=s("Retrieved from ")),n[2]||(n[2]=a("em",null,"JOptionPane Message Dialog Constants.",-1)),n[3]||(n[3]=s(" (2019). In K. Sierra & B. Bates (Eds.), Java\u2122 ")),n[4]||(n[4]=a("em",null,"How To Program (Early Objects)",-1)),n[5]||(n[5]=s(" (10th ed., p. 552). O'Reilly Media, Inc.: ")),a("a",m,[n[0]||(n[0]=s("https://www.oreilly.com/")),i(e)])])],64)}var v=d(g,[["render",k]]);export{v as default};
