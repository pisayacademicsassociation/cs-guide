import{_ as d,c as h,a as l,b as t,e as n,f as a,r,o as u,d as o}from"./app-CBXl5LzQ.js";const m="/cs-guide/assets/tree-DKsBijo0.png",p="/cs-guide/assets/tree-defn-CJ7txQ99.gif",c={},f={class:"table-of-contents"};function g(y,e){const s=r("router-link"),i=r("center");return u(),h("div",null,[e[12]||(e[12]=l('<h1 id="trees" tabindex="-1"><a class="header-anchor" href="#trees"><span>Trees</span></a></h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><h3 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents"><span>Table of Contents</span></a></h3>',3)),t("nav",f,[t("ul",null,[t("li",null,[n(s,{to:"#introduction"},{default:a(()=>e[0]||(e[0]=[o("Introduction")])),_:1}),t("ul",null,[t("li",null,[n(s,{to:"#table-of-contents"},{default:a(()=>e[1]||(e[1]=[o("Table of Contents")])),_:1})])])]),t("li",null,[n(s,{to:"#data-structure"},{default:a(()=>e[2]||(e[2]=[o("Data Structure")])),_:1})]),t("li",null,[n(s,{to:"#definition-of-terms"},{default:a(()=>e[3]||(e[3]=[o("Definition of Terms")])),_:1})]),t("li",null,[n(s,{to:"#notes-outline"},{default:a(()=>e[4]||(e[4]=[o("Notes Outline")])),_:1}),t("ul",null,[t("li",null,[n(s,{to:"#rooted-and-unrooted-trees"},{default:a(()=>e[5]||(e[5]=[o("Rooted and unrooted trees")])),_:1})]),t("li",null,[n(s,{to:"#types-of-trees"},{default:a(()=>e[6]||(e[6]=[o("Types of trees")])),_:1})]),t("li",null,[n(s,{to:"#binary-tree"},{default:a(()=>e[7]||(e[7]=[o("Binary Tree")])),_:1})]),t("li",null,[n(s,{to:"#types-of-binary-trees"},{default:a(()=>e[8]||(e[8]=[o("Types of Binary Trees")])),_:1})]),t("li",null,[n(s,{to:"#types-of-k-ary-trees"},{default:a(()=>e[9]||(e[9]=[o("Types of K-ary trees")])),_:1})]),t("li",null,[n(s,{to:"#types-of-binary-trees-1"},{default:a(()=>e[10]||(e[10]=[o("Types of Binary trees")])),_:1})])])])])]),e[13]||(e[13]=l('<h2 id="data-structure" tabindex="-1"><a class="header-anchor" href="#data-structure"><span>Data Structure</span></a></h2><p>A tree is a hierarchical data structure that consists of various &quot;nodes&quot; connected by &quot;edges&quot;.</p><img src="'+m+'" class="center x50"><p>While it may not look like one, you can flip the direction of the image and see a &quot;tree&quot;.</p><p>Here, our &quot;nodes&quot; are the <em>circles</em> that contain various letters, while our &quot;edges&quot; are the arrows pointing to other &quot;nodes&quot;.</p><h2 id="definition-of-terms" tabindex="-1"><a class="header-anchor" href="#definition-of-terms"><span>Definition of Terms</span></a></h2><p>Here, we will formally define the terms used in a tree data structure for you to understand what they may refer to when talking about trees.</p><ul><li>Node - A <strong>node</strong> is a container holding a key or value. It also points to it&#39;s <em>child</em> nodes.</li><li>Edge - An <strong>edge</strong> is the link connecting one node to another. These are commonly represented as <em>arrows</em>.</li><li>Root - A <strong>root</strong>, or <strong>root node</strong>, is the first node in a tree.</li><li>Parent node - A <strong>parent node</strong>, or <strong>internal node</strong>, is a <strong>node</strong> that has an edge connecting to a bottom node, commonly referred to as a <strong>child node</strong></li><li>Child node - A <strong>child node</strong> is a node located below a certain node connected by an edge.</li><li>Leaf - A <strong>leaf</strong> or <strong>leaf node</strong> is a node that does not connect to any child nodes.</li><li>Ancestors - Are nodes on the path from the current node to the root.</li><li>Descendants - Are nodes on the path from the current node to a leaf.</li><li>Subtree - Represents the descendants of a node.</li><li>Visiting - Checking the value of a node.</li><li>Traversing - Passing through nodes in a specific order.</li><li>Levels - The &quot;generation&quot; of a node. If the root node is at level 0, then its next child node is at level 1, its grandchild is at level 2, and so on. Basically, it&#39;s how &quot;down&quot; the node is from the root.</li><li>Degree of a node - The total amount of branches (valid edges) the node has.</li><li>Height of a node - The number of edges from the current node to the deepest leaf node.</li><li>Depth of a node - The number of edges from the current node to the root node.</li><li>Height of a tree - The number of edges from the root node to the deepest leaf node.</li><li>Forest - A collection of unjoined trees. (multiple trees)</li></ul><img src="'+p+'">',9)),n(i,null,{default:a(()=>e[11]||(e[11]=[t("br",null,null,-1),t("i",null,"It is heavily suggested you view this image in Dark mode.",-1)])),_:1}),e[14]||(e[14]=l('<h2 id="notes-outline" tabindex="-1"><a class="header-anchor" href="#notes-outline"><span>Notes Outline</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>All notes from this point on are in &quot;raw format&quot;, meaning that the current explanations for them will be <em>pure</em> text, and is most likely in the <em>outline format</em> note-taking method.</p><p>Sadly, due to time constraints, no visual aids or other imagery will exist as of the current moment, and will be added in a future time.</p></div><h3 id="rooted-and-unrooted-trees" tabindex="-1"><a class="header-anchor" href="#rooted-and-unrooted-trees"><span>Rooted and unrooted trees</span></a></h3><ul><li>Rooted trees are trees where a single node is designated as the root.</li><li>Unrooted trees don&#39;t have a &quot;root&quot;. In simpler terms, the tree does not exihibit &quot;ancestry&quot;, and looks more &quot;interconnected&quot;.</li></ul><h3 id="types-of-trees" tabindex="-1"><a class="header-anchor" href="#types-of-trees"><span>Types of trees</span></a></h3><ul><li>General tree <ul><li>no rules on the number of children</li></ul></li><li>K-ary tree <ul><li>children nodes are limited by k. A node may have no more than k children</li></ul></li></ul><h3 id="binary-tree" tabindex="-1"><a class="header-anchor" href="#binary-tree"><span>Binary Tree</span></a></h3><p>A type of k-ary tree where each node has a maximum of two children, commonly known as the <strong>left child</strong> and <strong>right child</strong>.</p><h3 id="types-of-binary-trees" tabindex="-1"><a class="header-anchor" href="#types-of-binary-trees"><span>Types of Binary Trees</span></a></h3><ul><li>Binary Search Tree (BST) <ul><li>A type of binary tree exhibiting the following properties: <ul><li>The left subtree or left child of a node contains values less than the value of the node.</li><li>The right subtree or right child of a node contains values greater than the value of the node.</li><li>The left and right subtrees must also be binary search trees.</li></ul></li></ul></li><li>Adelson-Velski and Landis Tree (AVL) <ul><li>A Binary Search Tree that is <em>self-balancing</em><ul><li>A <em>self-balancing</em> binary search tree is a binary search tree that automatically keeps it&#39;s height as small as possible.</li></ul></li></ul></li><li>Red-Black Tree <ul><li>A Binary Search Tree that is <em>self-balancing</em><ul><li>A <em>self-balancing</em> binary search tree is a binary search tree that automatically keeps it&#39;s height as small as possible.</li></ul></li><li>Follows certain rules to keep balance: <ul><li>Each node in the tree is either &quot;red&quot; or &quot;black&quot;.</li><li>The <em>root</em> is always &quot;black&quot;.</li><li>Red nodes cannot have red children.</li><li>Every path from the root to any of the leaf nodes must have the same number of black nodes. <ul><li>This means that for <strong>all</strong> paths from the root to the leaf nodes, they must <strong>all</strong> have the same number of black nodes traversed, including the leaf node (which is always black).</li></ul></li></ul></li></ul></li></ul><h3 id="types-of-k-ary-trees" tabindex="-1"><a class="header-anchor" href="#types-of-k-ary-trees"><span>Types of K-ary trees</span></a></h3><ul><li>Full k-ary tree <ul><li>A k-ary tree whose nodes have either <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> <strong>or</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> children.</li></ul></li><li>Complete k-ary tree <ul><li>A k-ary tree whose nodes must have <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> children <strong>except</strong> for the leaf nodes.</li><li>For the leaf nodes, they must be filled from <strong>left to right</strong>.</li></ul></li><li>Perfect k-ary tree <ul><li>A full k-ary tree, except</li><li><strong>All</strong> leaf nodes <strong>must</strong> be at the <strong>same</strong> level</li><li>Tip: A Perfect k-ary tree is both a full and complete k-ary tree. <strong>However</strong>, that does not mean that the converse is always true.</li></ul></li></ul><h3 id="types-of-binary-trees-1" tabindex="-1"><a class="header-anchor" href="#types-of-binary-trees-1"><span>Types of Binary trees</span></a></h3><p>Adding onto the types of k-ary trees above, binary trees also have extra types.</p><ul><li>Balanced binary tree <ul><li>A binary tree whose height is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> is the number of nodes.</li><li>The height of the left and right subtree can vary at most one</li></ul></li><li>Degenerate/Pathological Binary Tree <ul><li>A binary tree whose nodes have a single left or right child.</li></ul></li><li>Skewed Binary Tree <ul><li>A degenerate/pathological binary tree where the tree is &quot;dominated&quot; in either the left or right nodes. <ul><li>Could be a left-skewed binary tree or right-skewed binary tree</li><li>Side &quot;domination&quot; can be counted by the number of left or right nodes. The side with more nodes &quot;dominates&quot;.</li></ul></li></ul></li></ul>',15))])}const k=d(c,[["render",g],["__file","trees.html.vue"]]),w=JSON.parse('{"path":"/cs5/3/trees.html","title":"Trees","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[{"level":3,"title":"Table of Contents","slug":"table-of-contents","link":"#table-of-contents","children":[]}]},{"level":2,"title":"Data Structure","slug":"data-structure","link":"#data-structure","children":[]},{"level":2,"title":"Definition of Terms","slug":"definition-of-terms","link":"#definition-of-terms","children":[]},{"level":2,"title":"Notes Outline","slug":"notes-outline","link":"#notes-outline","children":[{"level":3,"title":"Rooted and unrooted trees","slug":"rooted-and-unrooted-trees","link":"#rooted-and-unrooted-trees","children":[]},{"level":3,"title":"Types of trees","slug":"types-of-trees","link":"#types-of-trees","children":[]},{"level":3,"title":"Binary Tree","slug":"binary-tree","link":"#binary-tree","children":[]},{"level":3,"title":"Types of Binary Trees","slug":"types-of-binary-trees","link":"#types-of-binary-trees","children":[]},{"level":3,"title":"Types of K-ary trees","slug":"types-of-k-ary-trees","link":"#types-of-k-ary-trees","children":[]},{"level":3,"title":"Types of Binary trees","slug":"types-of-binary-trees-1","link":"#types-of-binary-trees-1","children":[]}]}],"git":{"updatedTime":1741096210000},"filePathRelative":"cs5/3/trees.md"}');export{k as comp,w as data};
