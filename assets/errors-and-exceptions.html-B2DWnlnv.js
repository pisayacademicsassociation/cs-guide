import{_ as s,c as e,a as n,o as a}from"./app-Bw0f99q0.js";const t={};function l(c,i){return a(),e("div",null,i[0]||(i[0]=[n(`<p>Error</p><ul><li>A serious problem that a reasonable application should not try to catch</li></ul><p>Exception</p><ul><li>A condition that a reasonable application might want to catch</li></ul><p>Throwable</p><ul><li>Main interface of items that can be thrown</li></ul><p>Two kinds of exceptions</p><ul><li>Checked exceptions <ul><li>Exceptions that can be found during compile time</li></ul></li><li>Unchecked exceptions <ul><li>Exceptions that are found during run time (NullPointerException)</li></ul></li></ul><p>Throwing an exception</p><ul><li>Process of creating/generating an exception</li></ul><p>Handling an exception</p><ul><li>Coding process which detects and deals with exceptions</li></ul><p>Custom exception</p><ul><li>Exceptions created by the programmer to meet their specific requirements.</li><li>Created by extending the <code>Exception</code> class.</li><li>If you don&#39;t want to store exception details, use the default constructor. Otherwise, use a parameterized one.N</li></ul><h1 id="errors-and-exceptions" tabindex="-1"><a class="header-anchor" href="#errors-and-exceptions"><span>Errors and Exceptions</span></a></h1><p>In previous CS projects, you&#39;ve learned that a program can produce an Error when something unexpected happens. In Java, this is extended further with <code>Exception</code>s. Here, there is a clear difference between an <code>Error</code> and an <code>Exception</code>.</p><h2 id="errors-and-exceptions-the-difference" tabindex="-1"><a class="header-anchor" href="#errors-and-exceptions-the-difference"><span>Errors and Exceptions: The Difference</span></a></h2><p>Now, what is the difference between an <code>Error</code> and an <code>Exception</code> in Java?</p><p>An <code>Error</code> is a serious problem that a reasonable application <strong>shouldn&#39;t</strong> catch. An example of this is the <code>VirtualMachineError</code>, which is thrown when the Java Virtual Machine (JVM) broke or has run out of resources for it to continue operating. A reasonable program shouldn&#39;t try to catch this <code>Error</code>, since it can&#39;t really do anything about it.</p><p>Exceptions on the other hand, indicate problems that a program might wanna catch. An example of this is the <code>ArithmeticException</code>, which is thrown when an exceptional arithmetic condition has occurred. For example: dividing by zero. Dividing by 0 in Math gives a result of undefined, but Java doesn&#39;t do that. Instead, it throws an <code>ArithmeticException</code> to indicate that the program tried to divide by zero. You can catch this <code>Exception</code> and do actions accordingly.</p><h2 id="exception-types" tabindex="-1"><a class="header-anchor" href="#exception-types"><span>Exception types</span></a></h2><p>In Java, there are 2 exceptions:</p><ul><li>Checked exceptions, which are exceptional conditions that a program should anticipate and recover from, such as <code>ArithmeticException</code>, <code>FileNotFoundException</code>, etc., and</li><li>Unchecked exceptions, which are exceptional conditions that are internal to the application that could not be anticipated or recovered from, such as a <code>NullPointerException</code>.</li></ul><h2 id="creating-custom-exceptions" tabindex="-1"><a class="header-anchor" href="#creating-custom-exceptions"><span>Creating custom exceptions</span></a></h2><p>Sometimes, you would think of creating a custom exception for a possible exceptional condition in your program. You can do this by extending the <code>Exception</code> class.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> CustomException</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> extends</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> Exception</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">	public</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> CustomException</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> message</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">		super</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(message);</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">	}</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This allows you to create custom exceptions that you can use in your code.</p><p>You can also create a default constructor if you don&#39;t wanna store Exception details, like so.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">public</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> class</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> CustomException</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;"> extends</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;"> Exception</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">	public</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> CustomException</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">() {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">		super</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">();</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">	}</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="throwing-and-catching-exceptions" tabindex="-1"><a class="header-anchor" href="#throwing-and-catching-exceptions"><span>Throwing and Catching Exceptions</span></a></h2><p>Sometimes, you want to create exceptions for exceptional conditions in your code. You can do so by using the <code>throw</code> statement with your preferred exception.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">throw</span><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;"> new</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> InputMismatchException</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;Expected number input!&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You should be throwing <strong>instances</strong> of <code>Exception</code>, not the Exception class itself.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">// This is wrong.</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">throw</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> InputMismatchException;</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">// This is also wrong.</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">throw</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;"> InputMismatchException</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;Expected number input&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, how do we handle exceptions? You can handle code that could possibly throw an exception inside a <code>try-catch</code> or <code>try-catch-finally</code> block.</p><div class="language-java line-numbers-mode line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus light-plus vp-code" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF language-java;"><code><span class="line"><span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">try</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">	// code that could produce exceptions</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">} </span><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">catch</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Exception</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> e</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">	// code to handle the produced exception.</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">try</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">	// code that could produce exceptions</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">} </span><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">catch</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4EC9B0;--shiki-light:#267F99;">Exception</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> e</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">	// code to handle the produced exception.</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">} </span><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">finally</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">	// code to execute after the try or catch block.</span></span></span>
<span class="line"><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Code that could produce an <code>Exception</code> is added inside the <code>try</code> block. When an Exception occurs, the corresponding <code>catch</code> block will handle the thrown exception, then code inside the <code>finally</code> block is executed, if it&#39;s provided.</p><p>Do note that a <code>try</code> block must be preceeded by either a <code>catch</code> or a <code>finally</code> block.</p>`,37)]))}const p=s(t,[["render",l],["__file","errors-and-exceptions.html.vue"]]),r=JSON.parse('{"path":"/cs4/4/errors-and-exceptions.html","title":"Errors and Exceptions","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Errors and Exceptions: The Difference","slug":"errors-and-exceptions-the-difference","link":"#errors-and-exceptions-the-difference","children":[]},{"level":2,"title":"Exception types","slug":"exception-types","link":"#exception-types","children":[]},{"level":2,"title":"Creating custom exceptions","slug":"creating-custom-exceptions","link":"#creating-custom-exceptions","children":[]},{"level":2,"title":"Throwing and Catching Exceptions","slug":"throwing-and-catching-exceptions","link":"#throwing-and-catching-exceptions","children":[]}],"git":{"updatedTime":1737561594000},"filePathRelative":"cs4/4/errors-and-exceptions.md"}');export{p as comp,r as data};
