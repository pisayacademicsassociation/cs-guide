import{_ as a,c as e,a as s,o as t}from"./app-CmSRl3rn.js";const i={};function l(c,n){return t(),e("div",null,n[0]||(n[0]=[s(`<h1 id="control-structures" tabindex="-1"><a class="header-anchor" href="#control-structures"><span>Control Structures</span></a></h1><p>Control structures are statements which allow you to create the logic for your program.</p><p>There are three types of control structures: branching statements, looping statements and jumping statements/keyword.</p><p>A branching statement chooses between two or more possible actions, a looping statement repeats an action until a stopping condition occurs and a jumping statement/keyword transfers the program&#39;s control to a specific location in the code</p><h2 id="if-statement" tabindex="-1"><a class="header-anchor" href="#if-statement"><span>If statement</span></a></h2><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	statement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If your statement only contains one line, you can remove the curly braces like so</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> statement<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><h3 id="logic" tabindex="-1"><a class="header-anchor" href="#logic"><span>Logic</span></a></h3><p>If the expression <code>condition</code> is <code>true</code>, then <code>statement</code> is executed. Otherwise, it is ignored and the program moves on.</p><h2 id="if-else-statement" tabindex="-1"><a class="header-anchor" href="#if-else-statement"><span>If-else statement</span></a></h2><h3 id="syntax-1" tabindex="-1"><a class="header-anchor" href="#syntax-1"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	onTrueStatement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	onFalseStatement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-1" tabindex="-1"><a class="header-anchor" href="#logic-1"><span>Logic</span></a></h3><p>If the expression <code>condition</code> is <code>true</code>, then <code>onTrueStatement</code> is executed. Otherwise, it is ignored and the program executes <code>onFalseStatement</code> instead.</p><h2 id="nested-if-else-statement" tabindex="-1"><a class="header-anchor" href="#nested-if-else-statement"><span>Nested if-else statement</span></a></h2><h3 id="syntax-2" tabindex="-1"><a class="header-anchor" href="#syntax-2"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition_1<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>condition_2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Statement_1</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Statement_2</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>condition_3<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Statement_3</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Statement_4</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-2" tabindex="-1"><a class="header-anchor" href="#logic-2"><span>Logic</span></a></h3><p>If the expression <code>condition_1</code> is <code>true</code>, it checks if <code>condition_2</code> is <code>true</code>. If <code>condition_2</code> is <code>true</code>, <code>Statement_1</code> is executed, otherwhise <code>Statement_2</code> is executed. If the expression <code>condition_1</code> is <code>false</code>, it checks if <code>condition_3</code> is <code>true</code>. If <code>condition_3</code> is <code>true</code>, <code>Statement_3</code> is executed, otherwise <code>Statement_4</code> is executed.</p><h2 id="if-else-if-statement" tabindex="-1"><a class="header-anchor" href="#if-else-if-statement"><span>If-else-if statement</span></a></h2><h3 id="syntax-3" tabindex="-1"><a class="header-anchor" href="#syntax-3"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	statement1<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>second_condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	statement2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	statement3<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-3" tabindex="-1"><a class="header-anchor" href="#logic-3"><span>Logic</span></a></h3><p>If the expression <code>condition</code> is <code>true</code>, <code>statement1</code> is executed. Otherwise, checks if <code>second_condition</code> is <code>true</code>. If <code>second_condition</code> is <code>true</code>, <code>statement2</code> is executed. If <code>second_condition</code> is <code>false</code>, executes <code>statement3</code>.</p><h2 id="switch-statement" tabindex="-1"><a class="header-anchor" href="#switch-statement"><span>Switch statement</span></a></h2><h3 id="syntax-4" tabindex="-1"><a class="header-anchor" href="#syntax-4"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token class-name">Case1</span><span class="token operator">:</span></span>
<span class="line">		statement_1<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token class-name">Case2</span><span class="token operator">:</span></span>
<span class="line">		statement_2<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token class-name">Case3</span><span class="token operator">:</span></span>
<span class="line">		statement_3<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">		default_statement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-4" tabindex="-1"><a class="header-anchor" href="#logic-4"><span>Logic</span></a></h3><p>If <code>variable</code> is equal to <code>Case1</code>, executes <code>statement_1</code>, if <code>variable</code> is equal to <code>Case2</code>, executes <code>statement_2</code>, if <code>variable</code> is equal to <code>Case3</code>, executes <code>statement_3</code>, otherwise, executes <code>default_statement</code>.</p><p>The <code>break</code> keyword is used to end the current case statement. If omitted, it will continue down until it sees the <code>break</code> keyword. For example:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token class-name">Case1</span><span class="token operator">:</span></span>
<span class="line">		statement_1<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token class-name">Case2</span><span class="token operator">:</span></span>
<span class="line">		statement_2<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token class-name">Case3</span><span class="token operator">:</span></span>
<span class="line">		statement_3<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">case</span> <span class="token class-name">Case4</span><span class="token operator">:</span></span>
<span class="line">		statement_4<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">		default_statement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If <code>variable</code> is equal to <code>Case1</code>, then <code>statement_1</code>, <code>statement_2</code> and <code>statement_3</code> is executed. It does not execute <code>statement_4</code> because it has already seen the <code>break</code> keyword, which breaks out of the switch case.</p><h2 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch"><span>Try-Catch</span></a></h2><h3 id="syntax-5" tabindex="-1"><a class="header-anchor" href="#syntax-5"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">	statement_1<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	statement_2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-5" tabindex="-1"><a class="header-anchor" href="#logic-5"><span>Logic</span></a></h3><p>Executes <code>statement_1</code>. If <code>statement_1</code> throws an <code>Exception</code>, halts execution of <code>statement_1</code> and then executes <code>statement_2</code>.</p><h2 id="try-catch-finally" tabindex="-1"><a class="header-anchor" href="#try-catch-finally"><span>Try-Catch-Finally</span></a></h2><h3 id="syntax-6" tabindex="-1"><a class="header-anchor" href="#syntax-6"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">	statement_1<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	statement_2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">	statement_3<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-6" tabindex="-1"><a class="header-anchor" href="#logic-6"><span>Logic</span></a></h3><p>Executes <code>statement_1</code>. If <code>statement_1</code> throws an <code>Exception</code>, halts execution of <code>statement_1</code> and then executes <code>statement_2</code>. Once the execution of <code>statement_1</code> or <code>statement_2</code> finishes, executes <code>statement_3</code>.</p><h2 id="ternary-operator" tabindex="-1"><a class="header-anchor" href="#ternary-operator"><span>Ternary operator</span></a></h2><p>The ternary operator can be used in place of an if-else statement for variable values.</p><h3 id="syntax-7" tabindex="-1"><a class="header-anchor" href="#syntax-7"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">condition <span class="token operator">?</span> onTrue <span class="token operator">:</span> onFalse<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="logic-7" tabindex="-1"><a class="header-anchor" href="#logic-7"><span>Logic</span></a></h3><p>If the expression <code>condition</code> is <code>true</code>, <code>onTrue</code> will become the value, otherwise <code>onFalse</code> will become the value.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><p>This:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> max<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&gt;</span> n2<span class="token punctuation">)</span> max <span class="token operator">=</span> n1<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">else</span> max <span class="token operator">=</span> n2<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can be written like this:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">final</span> <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>n1 <span class="token operator">&gt;</span> n2<span class="token punctuation">)</span> <span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="while-statement" tabindex="-1"><a class="header-anchor" href="#while-statement"><span>While statement</span></a></h2><h3 id="syntax-8" tabindex="-1"><a class="header-anchor" href="#syntax-8"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	statement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-8" tabindex="-1"><a class="header-anchor" href="#logic-8"><span>Logic</span></a></h3><p>While the expression <code>condition</code> is <code>true</code>, executes <code>statement</code>, until <code>condition</code> is <code>false</code>.</p><h2 id="do-while-statement" tabindex="-1"><a class="header-anchor" href="#do-while-statement"><span>Do-while statement</span></a></h2><h3 id="syntax-9" tabindex="-1"><a class="header-anchor" href="#syntax-9"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">	statement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-9" tabindex="-1"><a class="header-anchor" href="#logic-9"><span>Logic</span></a></h3><p>Executes <code>statement</code> once, then checks if the expression <code>condition</code> is <code>true</code>, If <code>true</code>, executes <code>statement</code> until <code>condition</code> is <code>false</code>.</p><h2 id="for-statement" tabindex="-1"><a class="header-anchor" href="#for-statement"><span>For statement</span></a></h2><h3 id="syntax-10" tabindex="-1"><a class="header-anchor" href="#syntax-10"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>initialization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	statement<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1"><span>Example</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;amongus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logic-10" tabindex="-1"><a class="header-anchor" href="#logic-10"><span>Logic</span></a></h3><p>Executes initialization (this should be an assignment or declaration), then checks if the expression <code>condition</code> is <code>true</code>, If <code>true</code>, executes <code>update</code> (should be an increment or decrement), then <code>statement</code>.</p><h2 id="continue-statement-keyword" tabindex="-1"><a class="header-anchor" href="#continue-statement-keyword"><span>Continue statement/keyword</span></a></h2><p>Skips the remaining code within a loop for that particular iteration.</p><h3 id="syntax-11" tabindex="-1"><a class="header-anchor" href="#syntax-11"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The <code>continue</code> keyword can only be used inside loops.</p></div><h2 id="break-statement-keyword" tabindex="-1"><a class="header-anchor" href="#break-statement-keyword"><span>Break statement/keyword</span></a></h2><p>Immediately exits the loop, continuing execution to the first line of code after the loop&#39;s closing curly brace. If used inside a <code>switch</code> statement, exits out of that case and continues execution to the first line of code after the switch statement&#39;s closing curly brace.</p><h3 id="syntax-12" tabindex="-1"><a class="header-anchor" href="#syntax-12"><span>Syntax</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The <code>break</code> keyword can only be used inside loops or <code>switch</code> statements.</p></div><h2 id="boolean-expressions" tabindex="-1"><a class="header-anchor" href="#boolean-expressions"><span>Boolean expressions</span></a></h2><table><thead><tr><th>Name</th><th style="text-align:center;">Syntax</th><th style="text-align:center;">Examples</th></tr></thead><tbody><tr><td>Equal to</td><td style="text-align:center;">==</td><td style="text-align:center;">answer == &#39;a&#39;</td></tr><tr><td>Not equal to</td><td style="text-align:center;">!=</td><td style="text-align:center;">relax != res</td></tr><tr><td>Greater than</td><td style="text-align:center;">&gt;</td><td style="text-align:center;">expenses &gt; income</td></tr><tr><td>Greater than or equal to</td><td style="text-align:center;">&gt;=</td><td style="text-align:center;">points &gt;= 30</td></tr><tr><td>Less than</td><td style="text-align:center;">&lt;</td><td style="text-align:center;">expenses &lt; income</td></tr><tr><td>Less than or equal to</td><td style="text-align:center;">&lt;=</td><td style="text-align:center;">points &lt;= 30</td></tr></tbody></table>`,83)]))}const p=a(i,[["render",l],["__file","control-structures.html.vue"]]),d=JSON.parse('{"path":"/cs4/1/control-structures.html","title":"Control Structures","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"If statement","slug":"if-statement","link":"#if-statement","children":[{"level":3,"title":"Syntax","slug":"syntax","link":"#syntax","children":[]},{"level":3,"title":"Logic","slug":"logic","link":"#logic","children":[]}]},{"level":2,"title":"If-else statement","slug":"if-else-statement","link":"#if-else-statement","children":[{"level":3,"title":"Syntax","slug":"syntax-1","link":"#syntax-1","children":[]},{"level":3,"title":"Logic","slug":"logic-1","link":"#logic-1","children":[]}]},{"level":2,"title":"Nested if-else statement","slug":"nested-if-else-statement","link":"#nested-if-else-statement","children":[{"level":3,"title":"Syntax","slug":"syntax-2","link":"#syntax-2","children":[]},{"level":3,"title":"Logic","slug":"logic-2","link":"#logic-2","children":[]}]},{"level":2,"title":"If-else-if statement","slug":"if-else-if-statement","link":"#if-else-if-statement","children":[{"level":3,"title":"Syntax","slug":"syntax-3","link":"#syntax-3","children":[]},{"level":3,"title":"Logic","slug":"logic-3","link":"#logic-3","children":[]}]},{"level":2,"title":"Switch statement","slug":"switch-statement","link":"#switch-statement","children":[{"level":3,"title":"Syntax","slug":"syntax-4","link":"#syntax-4","children":[]},{"level":3,"title":"Logic","slug":"logic-4","link":"#logic-4","children":[]}]},{"level":2,"title":"Try-Catch","slug":"try-catch","link":"#try-catch","children":[{"level":3,"title":"Syntax","slug":"syntax-5","link":"#syntax-5","children":[]},{"level":3,"title":"Logic","slug":"logic-5","link":"#logic-5","children":[]}]},{"level":2,"title":"Try-Catch-Finally","slug":"try-catch-finally","link":"#try-catch-finally","children":[{"level":3,"title":"Syntax","slug":"syntax-6","link":"#syntax-6","children":[]},{"level":3,"title":"Logic","slug":"logic-6","link":"#logic-6","children":[]}]},{"level":2,"title":"Ternary operator","slug":"ternary-operator","link":"#ternary-operator","children":[{"level":3,"title":"Syntax","slug":"syntax-7","link":"#syntax-7","children":[]},{"level":3,"title":"Logic","slug":"logic-7","link":"#logic-7","children":[]},{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"While statement","slug":"while-statement","link":"#while-statement","children":[{"level":3,"title":"Syntax","slug":"syntax-8","link":"#syntax-8","children":[]},{"level":3,"title":"Logic","slug":"logic-8","link":"#logic-8","children":[]}]},{"level":2,"title":"Do-while statement","slug":"do-while-statement","link":"#do-while-statement","children":[{"level":3,"title":"Syntax","slug":"syntax-9","link":"#syntax-9","children":[]},{"level":3,"title":"Logic","slug":"logic-9","link":"#logic-9","children":[]}]},{"level":2,"title":"For statement","slug":"for-statement","link":"#for-statement","children":[{"level":3,"title":"Syntax","slug":"syntax-10","link":"#syntax-10","children":[]},{"level":3,"title":"Example","slug":"example-1","link":"#example-1","children":[]},{"level":3,"title":"Logic","slug":"logic-10","link":"#logic-10","children":[]}]},{"level":2,"title":"Continue statement/keyword","slug":"continue-statement-keyword","link":"#continue-statement-keyword","children":[{"level":3,"title":"Syntax","slug":"syntax-11","link":"#syntax-11","children":[]}]},{"level":2,"title":"Break statement/keyword","slug":"break-statement-keyword","link":"#break-statement-keyword","children":[{"level":3,"title":"Syntax","slug":"syntax-12","link":"#syntax-12","children":[]}]},{"level":2,"title":"Boolean expressions","slug":"boolean-expressions","link":"#boolean-expressions","children":[]}],"git":{"updatedTime":1737561594000},"filePathRelative":"cs4/1/control-structures.md"}');export{p as comp,d as data};
